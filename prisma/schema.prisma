generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Recipe {
    id                Int                @id @default(autoincrement())
    title             String
    imageUrl          String
    cookingTime       Int
    difficultyLevel   DifficultyLevel
    details           String             @db.Text
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    createdBy         User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById       String
    category          Category           @relation(fields: [categoryTitle], references: [title], onDelete: Cascade)
    categoryTitle     String
    recipeIngredients RecipeIngredient[]

    @@index([title])
}

enum DifficultyLevel {
    EASY
    MODERATE
    DIFFICULT
}

model Category {
    id      Int      @id @default(autoincrement())
    title   String   @unique
    recipes Recipe[]
}

model Ingredient {
    id                Int                @id @default(autoincrement())
    title             String             @unique
    recipeIngredients RecipeIngredient[]
}

model RecipeIngredient {
    id               Int            @id @default(autoincrement())
    ingredientFor    Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId         Int
    ingredient       Ingredient     @relation(fields: [ingredientId], references: [id])
    ingredientId     Int
    measurmentQty    Int
    measurmentUnit   measurmentUnit @relation(fields: [measurmentUnitId], references: [id])
    measurmentUnitId Int
}

model measurmentUnit {
    id               Int                @id @default(autoincrement())
    title            String             @unique
    recipeIngredient RecipeIngredient[]
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt()
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    recipes       Recipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
