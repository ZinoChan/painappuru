generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Recipe {
    id                Int                @id @default(autoincrement())
    title             String
    imageUrl          String
    cookingTime       Int
    difficultyLevel   DifficultyLevel
    details           String             @db.Text
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    createdBy         User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById       String
    category          Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId        Int
    recipeIngredients RecipeIngredient[]
    recipeTags        RecipeTag[]

    @@index([title])
}

enum DifficultyLevel {
    EASY
    MODERATE
    DIFFICULT
}

model Category {
    id      Int      @id @default(autoincrement())
    title   String
    recipes Recipe[]
}

model Ingredient {
    id                Int                @id @default(autoincrement())
    title             String             @unique
    recipeIngredients RecipeIngredient[]
}

model RecipeIngredient {
    id            Int        @id @default(autoincrement())
    ingredientFor Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId      Int
    ingredient    Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
    ingredientId  Int
    quantity      String
}

model Tag {
    id         Int         @id @default(autoincrement())
    title      String      @unique
    recipeTags RecipeTag[]
}

model RecipeTag {
    id       Int    @id @default(autoincrement())
    tagFor   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId Int
    tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId    Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    recipes       Recipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
